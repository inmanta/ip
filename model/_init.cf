"""
    Copyright 2016 Inmanta

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: code@inmanta.com
"""
import net
import std
import ip::services

typedef ip as string matching /^([0-9]{1,3})(\.[0-9]{1,3}){3}$/
typedef protocol as string matching
    self == "tcp" or self == "udp" or self == "icmp" or self == "sctp"
    
typedef cidr as string matching /^([0-9]{1,3})(\.[0-9]{1,3}){3}.[0-9]{1,2}$/
typedef port as number matching self >= 0 and self < 65536

typedef Address as Alias(alias = 0)

entity Host extends std::Host:
    """
        A host that has an ip attribute for easy ip address access in the configuration
        model.

        :param ip       The ipaddress of this node
    """
    ip::ip ip
end
implement Host using std::hostDefaults

entity IP:
    """
        Base class for all ip addresses
    """
    ip v4="0.0.0.0"
end

implement IP using std::none

entity Alias extends IP:
    ip      netmask="0.0.0.0"
    number alias=0
    bool   dhcp=false
end

entity Network:
    """
        A network in this infrastructure.
    """
    string  network
    string  netmask
    string  name
    bool    dhcp
end

entity Router:
    """
        This interface is used to indicate that a host may function as a router
    """
end

ip::Host host [1] -- [0:1] Router router

# only interfaces that are associated with a router can forward packets
net::Interface ifaces [1:] -- [0:1] Router router
net::Interface iface [1] -- [0:] Alias ip_address

entity Gateway:
    """
        Model a gateway in a network
    """
    string  ipaddress
    number  metric
end

entity Route:
    """
        Model a route to a network
    """
    string network
    string netmask
    string gateway
end

Route routes [0:] -- [1:] net::Interface iface

Gateway gateway [0:] -- [1] Network network

entity PortRange:
    port    low
    port    high
end

implement PortRange using std::none

typedef Port as PortRange(high = 0)

Service service_dst [0:] -- [0:] PortRange dst_range
Service service_src [0:] -- [0:] PortRange src_range

entity Service:
    """
        Define a service as a protocol and a source and destination port range
    """
    protocol    proto
end 

typedef DstService as Service(src_range = ip::services::all_range)

implement Gateway using std::none
implement Route using std::none
implement Service using std::none
implement Alias using std::none
implement Network using std::none
implement Router using std::none

